// class Solution {
//     public int lengthOfLongestSubstring(String s) {
//         // hashset because no repeating charcters 
//         Set<Character> hset = new HashSet<>();
//         int start = 0;
//         int end = 0;
//         int result = 0;
//         while(end < s.length()){
//             // char temp = s.charAt(end); // a
//             if(hset.contains(s.charAt(end))){
//                 hset.remove(s.charAt(start)); 
//                 start++;
//             }else{
//                 hset.add(s.charAt(end));
//                  result = Math.max(result, hset.size());// every time we ecncounter a new chracter our substring length increases
//                 end++;
//             }
//         }
//         return result;
//     }
// }

class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> hmap = new HashMap<>();
        int start = 0;
        int end = 0;
        int count = 0;
        int result = 0;
        while(end < s.length()){
            char c = s.charAt(end);
            hmap.put(c, hmap.getOrDefault(c, 0) + 1);
            
            if(hmap.get(c) > 1){
                count ++;
            }
            end++;
            
            while(count > 0){
                char ch = s.charAt(start);
                if(hmap.get(ch) > 1){
                    count--;
                }
                hmap.put(ch, hmap.get(ch) - 1);
                start++;
            }
            result = Math.max(result, end - start);
        }
        return result;
    }
}



